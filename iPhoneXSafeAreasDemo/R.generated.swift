//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Info.plist`.
    static let infoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Info", withExtension: "plist")`
    static func infoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `background-black`.
    static let backgroundBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "background-black")
    /// Image `cat-tie-1`.
    static let catTie1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat-tie-1")
    /// Image `cat-tie-2`.
    static let catTie2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat-tie-2")
    /// Image `cat-tie-3`.
    static let catTie3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat-tie-3")
    /// Image `cat-tie-4`.
    static let catTie4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat-tie-4")
    /// Image `cat-tie-5`.
    static let catTie5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat-tie-5")
    /// Image `icon-door`.
    static let iconDoor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-door")
    /// Image `icon-employee`.
    static let iconEmployee = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-employee")
    /// Image `icon-entries`.
    static let iconEntries = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-entries")
    /// Image `icon-placeholder`.
    static let iconPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-placeholder")
    /// Image `icon-share`.
    static let iconShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-share")
    /// Image `logo-strv`.
    static let logoStrv = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-strv")
    
    /// `UIImage(named: "background-black", bundle: ..., traitCollection: ...)`
    static func backgroundBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cat-tie-1", bundle: ..., traitCollection: ...)`
    static func catTie1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catTie1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cat-tie-2", bundle: ..., traitCollection: ...)`
    static func catTie2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catTie2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cat-tie-3", bundle: ..., traitCollection: ...)`
    static func catTie3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catTie3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cat-tie-4", bundle: ..., traitCollection: ...)`
    static func catTie4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catTie4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cat-tie-5", bundle: ..., traitCollection: ...)`
    static func catTie5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catTie5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-door", bundle: ..., traitCollection: ...)`
    static func iconDoor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDoor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-employee", bundle: ..., traitCollection: ...)`
    static func iconEmployee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEmployee, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-entries", bundle: ..., traitCollection: ...)`
    static func iconEntries(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEntries, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-placeholder", bundle: ..., traitCollection: ...)`
    static func iconPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-share", bundle: ..., traitCollection: ...)`
    static func iconShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconShare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-strv", bundle: ..., traitCollection: ...)`
    static func logoStrv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoStrv, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ItemTableViewCell`.
    static let itemTableViewCell = _R.nib._ItemTableViewCell()
    
    /// `UINib(name: "ItemTableViewCell", in: bundle)`
    static func itemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ItemTableViewCell`.
    static let itemTableViewCell: Rswift.ReuseIdentifier<ItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "ItemTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemTableViewCell"
      let name = "ItemTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "background-black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background-black' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let itemDetailVC = StoryboardViewControllerResource<ItemDetailVC>(identifier: "ItemDetailVC")
      let name = "Main"
      
      func itemDetailVC(_: Void = ()) -> ItemDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemDetailVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon-share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-share' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-employee") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-employee' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-door") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-door' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-entries") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-entries' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-placeholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().itemDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemDetailVC' could not be loaded from storyboard 'Main' as 'ItemDetailVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
